(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{555:function(e,s,t){"use strict";t.r(s);var a=t(27),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"常用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[e._v("#")]),e._v(" 常用指令")]),e._v(" "),t("h2",{attrs:{id:"dockerfile给ubuntu换源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile给ubuntu换源"}},[e._v("#")]),e._v(" Dockerfile给ubuntu换源")]),e._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"macos运行容器时同步宿主机时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macos运行容器时同步宿主机时间"}},[e._v("#")]),e._v(" macOS运行容器时同步宿主机时间")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("-e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TZ")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -la /etc/localtime "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cut")]),e._v(" -d/ -f8-9"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"macos中容器访问宿主机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macos中容器访问宿主机"}},[e._v("#")]),e._v(" MacOS中容器访问宿主机")]),e._v(" "),t("p",[e._v("可以用"),t("code",[e._v("host.docker.internal")]),e._v("来访问宿主机")]),e._v(" "),t("blockquote",[t("p",[e._v("https://docs.docker.com/desktop/networking/#use-cases-and-workarounds")])]),e._v(" "),t("h2",{attrs:{id:"构建跨平台镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建跨平台镜像"}},[e._v("#")]),e._v(" 构建跨平台镜像")]),e._v(" "),t("h3",{attrs:{id:"docker-buildx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-buildx"}},[e._v("#")]),e._v(" docker buildx")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建builder")]),e._v("\ndocker buildx create --name cross-platform-builder --driver docker-container --use\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 执行构建")]),e._v("\ndocker buildx build --platform linux/amd64,linux/arm64 -t 镜像名:tag "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("-o "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("registry "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" --push"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看推送到远程的镜像信息")]),e._v("\ndocker buildx imagetools inspect 镜像名:tag\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("buildx 实例通过两种方式来执行构建任务，两种执行方式被称为使用不同的「驱动」：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker")]),e._v(" 驱动：使用 Docker 服务程序中集成的 BuildKit 库执行构建。")]),e._v(" "),t("li",[t("code",[e._v("docker-container")]),e._v(" 驱动：启动一个包含 BuildKit 的容器并在容器中执行构建。")])]),e._v(" "),t("p",[t("code",[e._v("docker")]),e._v(" 驱动无法使用一小部分 "),t("code",[e._v("buildx")]),e._v(" 的特性（如在一次运行中同时构建多个平台镜像），此外在镜像的默认输出格式上也有所区别："),t("code",[e._v("docker")]),e._v(" 驱动默认将构建结果以 Docker 镜像格式直接输出到 "),t("code",[e._v("docker")]),e._v(" 的镜像目录（通常是 "),t("code",[e._v("/var/lib/overlay2")]),e._v("），之后执行 "),t("code",[e._v("docker images")]),e._v(" 命令可以列出所输出的镜像；而 "),t("code",[e._v("docker container")]),e._v(" 则需要通过 "),t("code",[e._v("--output")]),e._v(" 选项指定输出格式为镜像或其他格式。")]),e._v(" "),t("p",[t("code",[e._v("docker buildx build")]),e._v(" 支持丰富的输出行为，通过"),t("code",[e._v("--output=[PATH,-,type=TYPE[,KEY=VALUE]")]),e._v(" 选项可以指定构建结果的输出类型和路径等，常用的输出类型有以下几种：")]),e._v(" "),t("ul",[t("li",[e._v("local：构建结果将以文件系统格式写入 "),t("code",[e._v("dest")]),e._v(" 指定的本地路径， 如 "),t("code",[e._v("--output type=local,dest=./output")]),e._v("。")]),e._v(" "),t("li",[e._v("tar：构建结果将在打包后写入 "),t("code",[e._v("dest")]),e._v(" 指定的本地路径。")]),e._v(" "),t("li",[e._v("oci：构建结果以 OCI 标准镜像格式写入 "),t("code",[e._v("dest")]),e._v(" 指定的本地路径。")]),e._v(" "),t("li",[e._v("docker：构建结果以 Docker 标准镜像格式写入 "),t("code",[e._v("dest")]),e._v(" 指定的本地路径或加载到 "),t("code",[e._v("docker")]),e._v(" 的镜像库中。同时指定多个目标平台时无法使用该选项。")]),e._v(" "),t("li",[e._v("image：以镜像或者镜像列表输出，并支持 "),t("code",[e._v("push=true")]),e._v(" 选项直接推送到远程仓库，同时指定多个目标平台时可使用该选项。")]),e._v(" "),t("li",[e._v("registry："),t("code",[e._v("type=image,push=true")]),e._v(" 的精简表示。")])]),e._v(" "),t("blockquote",[t("p",[e._v("https://waynerv.com/posts/building-multi-architecture-images-with-docker-buildx/")])])])}),[],!1,null,null,null);s.default=r.exports}}]);