(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{460:function(a,t,r){"use strict";r.r(t);var s=r(27),i=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"javaspi机制和springboot自动装配原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javaspi机制和springboot自动装配原理"}},[a._v("#")]),a._v(" JavaSPI机制和Springboot自动装配原理")]),a._v(" "),r("h2",{attrs:{id:"spi机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spi机制"}},[a._v("#")]),a._v(" SPI机制")]),a._v(" "),r("p",[r("code",[a._v("SPI（Service Provider Interface）")]),a._v("是一种服务发现机制，提供服务接口，且为该接口寻找服务的实现。")]),a._v(" "),r("p",[a._v("从Java6开始引入，是一种基于ClassLoader类加载器发现并加载服务的机制。")]),a._v(" "),r("p",[a._v("标准的SPI构成：")]),a._v(" "),r("ul",[r("li",[a._v("Service：公开的接口或抽象类，定义一个抽象的功能模块")]),a._v(" "),r("li",[a._v("Service Provider：Service接口/抽象类的具体实现")]),a._v(" "),r("li",[a._v("ServiceLoader：SPI中的核心组件，负责在"),r("strong",[a._v("运行时")]),a._v("发现并加载Service Provider")])]),a._v(" "),r("h3",{attrs:{id:"java-spi的规范要素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-spi的规范要素"}},[a._v("#")]),a._v(" JAVA SPI的规范要素")]),a._v(" "),r("ul",[r("li",[a._v("规范的配置文件\n"),r("ul",[r("li",[a._v("文件路径：必须要在JAR中的META-INF/services下")]),a._v(" "),r("li",[a._v("文件名称："),r("strong",[a._v("Service接口")]),a._v("全限定名")]),a._v(" "),r("li",[a._v("文件内容："),r("strong",[a._v("Service实现类")]),a._v("的全限定名，如果有多个，则每个类单独占一行")])])]),a._v(" "),r("li",[a._v("ServiceProvider必须有无参构造方法，因为要通过反射实例化")]),a._v(" "),r("li",[a._v("保证能加载到配置文件和ServiceProvider类\n"),r("ul",[r("li",[a._v("将jar包放到classpath下")]),a._v(" "),r("li",[a._v("jar包安装到jre的扩展目录下")]),a._v(" "),r("li",[a._v("自定义一个ClassLoader")])])])]),a._v(" "),r("h3",{attrs:{id:"场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[a._v("#")]),a._v(" 场景")]),a._v(" "),r("p",[a._v("SPI在JDBC中的应用：JDBC要求Driver实现类在类加载的时候将自身的实例注册到DriverManager中，从而加载数据库驱动，在SPI出现之前，加载数据库驱动时要执行"),r("code",[a._v('Class.forName("com.mysql.jdbc.Driver")')]),a._v("， 在SPI出现后，只需要引入对应依赖的JAR包后，ServiceLoader会自动去约定的路径下寻找需要加载的类。")]),a._v(" "),r("h4",{attrs:{id:"以mysql-connector-java的jar文件为例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#以mysql-connector-java的jar文件为例"}},[a._v("#")]),a._v(" 以mysql-connector-java的jar文件为例")]),a._v(" "),r("ul",[r("li",[a._v("配置文件")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410224243304.png",alt:"image-20220410224243304"}})]),a._v(" "),r("ul",[r("li",[a._v("无参构造器")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410224639940.png",alt:"image-20220410224639940"}})]),a._v(" "),r("h3",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),r("ul",[r("li",[a._v("SPI提供了一种"),r("strong",[a._v("组件发现和注册的方式")]),a._v("，可以用于各种插件、组件的灵活替换")]),a._v(" "),r("li",[a._v("可以实现模块间解耦")]),a._v(" "),r("li",[a._v("面向接口+配置文件+反射")]),a._v(" "),r("li",[a._v("应用：JDBC、SLF4J。。。")])]),a._v(" "),r("h3",{attrs:{id:"简单实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单实例"}},[a._v("#")]),a._v(" 简单实例")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410231011833.png",alt:"image-20220410231011833"}})]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410231049522.png",alt:"image-20220410231049522"}})]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410231109810.png",alt:"image-20220410231109810"}})]),a._v(" "),r("p",[a._v("当spi-company依赖spi-lt时运行main方法：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410231225984.png",alt:"image-20220410231225984"}})]),a._v(" "),r("p",[a._v("当spi-company依赖spi-yd时运行main方法：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410231313507.png",alt:"image-20220410231313507"}})]),a._v(" "),r("h2",{attrs:{id:"springboot的自动装配"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot的自动装配"}},[a._v("#")]),a._v(" springboot的自动装配")]),a._v(" "),r("p",[a._v("自动装配，即auto-configuration，是基于引入的依赖jar包对springboot应用进行自动配置，提供自动配置的jar包通常以starter结尾，比如mybatis-spring-boot-starter等等。")]),a._v(" "),r("p",[a._v("springboot默认会扫描项目下所有的配置类并注入到ioc容器中，但集成到其他框架并不能直接注入。为了实现真正的auto configuration，springboot的自动装配也采用了和spi类似的设计思想：")]),a._v(" "),r("ul",[r("li",[a._v("使用约定的配置文件：自动装配的配置文件为META-INF/spring.factories，文件内容为org.springframework.boot.autoconfigure.EnableAutoConfiguration=class1,class2,..classN，class是自动配置类的类名")]),a._v(" "),r("li",[a._v("提供自动配置类的jar包中，需要提供配置文件META-INF/spring.factories")]),a._v(" "),r("li",[a._v("使用ClassLoader的getResource和getResources方法，读取classpath中的配置文件并使用反射实例化")])]),a._v(" "),r("p",[a._v("例如mybatis-spring-boot-starter的包结构：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://storyxc.com/images/blog/image-20220410232256701.png",alt:"image-20220410232256701"}})]),a._v(" "),r("h3",{attrs:{id:"总结-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),r("p",[a._v("springboot的自动装配核心流程：springboot程序启动，通过spring factories机制加载classpath下的META-INF/spring.factories文件，筛选出所有EnableAutoConfiguration的配置类，反射实例化后注入到springIOC容器中。")]),a._v(" "),r("p",[a._v("todo：实现一个自定义springboot-starter")])])}),[],!1,null,null,null);t.default=i.exports}}]);