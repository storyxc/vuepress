(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{464:function(e,r,t){"use strict";t.r(r);var o=t(27),n=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"configurationproperties注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configurationproperties注解"}},[e._v("#")]),e._v(" ConfigurationProperties注解")]),e._v(" "),t("p",[e._v("@ConfigurationProperties注解可以从外部获取配置信息，并将其绑定到JavaBean中。")]),e._v(" "),t("h2",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),t("p",[e._v("SpringBoot可以让配置信息外部化，支持的配置有多种，最常见的"),t("code",[e._v(".properties")]),e._v("、"),t("code",[e._v(".yaml")]),e._v("文件，启动时命令行参数"),t("code",[e._v("--xxx")]),e._v("、系统环境变量、Java系统属性(System.getProperties())...")]),e._v(" "),t("p",[e._v("@ConfigurationProperties注解的功能由ConfigurationPropertiesBindingPostProcessor这个后置处理器实现，spring容器中的"),t("code",[e._v("enviroment.propertySources")]),e._v("记录着外部的属性值，properties后置处理器会从中找到匹配的值绑定到JavaBean中。")]),e._v(" "),t("p",[e._v("属性的绑定是会被覆盖的，排序靠后的会覆盖靠前的，即越靠后的优先级越高。（os环境变量可以覆盖application.properties,java系统属性可以覆盖系统环境变量，命令行参数可以覆盖java系统属性...)")]),e._v(" "),t("p",[e._v("这些配置的方式和可以参照spring boot官方文档：")]),e._v(" "),t("blockquote",[t("p",[e._v("https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config")]),e._v(" "),t("h2",{attrs:{id:"_2-externalized-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-externalized-configuration"}},[e._v("#")]),e._v(" 2. Externalized Configuration")]),e._v(" "),t("p",[e._v("Spring Boot lets you externalize your configuration so that you can work with the same application code in different environments. You can use a variety of external configuration sources, include Java properties files, YAML files, environment variables, and command-line arguments.")]),e._v(" "),t("p",[e._v("Property values can be injected directly into your beans by using the "),t("code",[e._v("@Value")]),e._v(" annotation, accessed through Spring’s "),t("code",[e._v("Environment")]),e._v(" abstraction, or be "),t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties",target:"_blank",rel:"noopener noreferrer"}},[e._v("bound to structured objects"),t("OutboundLink")],1),e._v(" through "),t("code",[e._v("@ConfigurationProperties")]),e._v(".")]),e._v(" "),t("p",[e._v("Spring Boot uses a very particular "),t("code",[e._v("PropertySource")]),e._v(" order that is designed to allow sensible overriding of values. Properties are considered in the following order (with values from lower items overriding earlier ones):")]),e._v(" "),t("ol",[t("li",[e._v("Default properties (specified by setting "),t("code",[e._v("SpringApplication.setDefaultProperties")]),e._v(").")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.3.21/javadoc-api/org/springframework/context/annotation/PropertySource.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("@PropertySource")]),t("OutboundLink")],1),e._v(" annotations on your "),t("code",[e._v("@Configuration")]),e._v(" classes. Please note that such property sources are not added to the "),t("code",[e._v("Environment")]),e._v(" until the application context is being refreshed. This is too late to configure certain properties such as "),t("code",[e._v("logging.*")]),e._v(" and "),t("code",[e._v("spring.main.*")]),e._v(" which are read before refresh begins.")]),e._v(" "),t("li",[e._v("Config data (such as "),t("code",[e._v("application.properties")]),e._v(" files).")]),e._v(" "),t("li",[e._v("A "),t("code",[e._v("RandomValuePropertySource")]),e._v(" that has properties only in "),t("code",[e._v("random.*")]),e._v(".")]),e._v(" "),t("li",[e._v("OS environment variables.")]),e._v(" "),t("li",[e._v("Java System properties ("),t("code",[e._v("System.getProperties()")]),e._v(").")]),e._v(" "),t("li",[e._v("JNDI attributes from "),t("code",[e._v("java:comp/env")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("ServletContext")]),e._v(" init parameters.")]),e._v(" "),t("li",[t("code",[e._v("ServletConfig")]),e._v(" init parameters.")]),e._v(" "),t("li",[e._v("Properties from "),t("code",[e._v("SPRING_APPLICATION_JSON")]),e._v(" (inline JSON embedded in an environment variable or system property).")]),e._v(" "),t("li",[e._v("Command line arguments.")]),e._v(" "),t("li",[t("code",[e._v("properties")]),e._v(" attribute on your tests. Available on "),t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/2.7.1/api/org/springframework/boot/test/context/SpringBootTest.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("@SpringBootTest")]),t("OutboundLink")],1),e._v(" and the "),t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications.autoconfigured-tests",target:"_blank",rel:"noopener noreferrer"}},[e._v("test annotations for testing a particular slice of your application"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.3.21/javadoc-api/org/springframework/test/context/TestPropertySource.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("@TestPropertySource")]),t("OutboundLink")],1),e._v(" annotations on your tests.")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.devtools.globalsettings",target:"_blank",rel:"noopener noreferrer"}},[e._v("Devtools global settings properties"),t("OutboundLink")],1),e._v(" in the "),t("code",[e._v("$HOME/.config/spring-boot")]),e._v(" directory when devtools is active.")])]),e._v(" "),t("p",[e._v("Config data files are considered in the following order:")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files",target:"_blank",rel:"noopener noreferrer"}},[e._v("Application properties"),t("OutboundLink")],1),e._v(" packaged inside your jar ("),t("code",[e._v("application.properties")]),e._v(" and YAML variants).")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.profile-specific",target:"_blank",rel:"noopener noreferrer"}},[e._v("Profile-specific application properties"),t("OutboundLink")],1),e._v(" packaged inside your jar ("),t("code",[e._v("application-{profile}.properties")]),e._v(" and YAML variants).")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files",target:"_blank",rel:"noopener noreferrer"}},[e._v("Application properties"),t("OutboundLink")],1),e._v(" outside of your packaged jar ("),t("code",[e._v("application.properties")]),e._v(" and YAML variants).")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.profile-specific",target:"_blank",rel:"noopener noreferrer"}},[e._v("Profile-specific application properties"),t("OutboundLink")],1),e._v(" outside of your packaged jar ("),t("code",[e._v("application-{profile}.properties")]),e._v(" and YAML variants).")])])]),e._v(" "),t("h3",{attrs:{id:"系统环境变量的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统环境变量的方式"}},[e._v("#")]),e._v(" 系统环境变量的方式")]),e._v(" "),t("p",[e._v("这里通过系统环境变量的绑定方式大致记录下，因为java应用的docker镜像通常使用这种方式，例如docker启动指令里加上"),t("code",[e._v("-e xxx=xxx")]),e._v("，就是在指定docker容器的系统环境变量。比较常见的"),t("code",[e._v("-e JAVA_OPTS=xxx")]),e._v(" ,因为java应用的镜像通常entrypoint都是"),t("code",[e._v("sh -c java $JAVA_OPTS xxx.jar")]),e._v("。")]),e._v(" "),t("p",[e._v("上文中"),t("code",[e._v("enviroment.propertySources")]),e._v("会读取外部的配置，系统环境变量是通过"),t("code",[e._v("System.getenv()")]),e._v("获取的，通过docker指令给镜像添加了系统环境变量后，就会通过这种方式绑定到java应用的配置类中。")]),e._v(" "),t("h3",{attrs:{id:"但是"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#但是"}},[e._v("#")]),e._v(" 但是")]),e._v(" "),t("p",[e._v("通过docker指令配置系统环境变量的方式，参数的命名需要做对应的调整，例如:")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@ConfigurationProperties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"user"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("如果是通过"),t("code",[e._v(".properties")]),e._v("文件来配置那么文件中应该是"),t("code",[e._v("user.name=xxx")]),e._v(",如果是通过linux系统环境变量的方式，则环境变量中应该是"),t("code",[e._v("USER_NAME=xxx")]),e._v(".这是因为不同操作系统对环境变量的命名规则都有严格的要求，spring boot的宽松绑定规则要尽可能兼容不同系统的限制.")]),e._v(" "),t("p",[e._v("linux shell变量的命名规则：可以"),t("code",[e._v("a-zA-Z0-9")]),e._v("，可以下划线"),t("code",[e._v("_")]),e._v(",按照惯例，变量名都是大写的。所以，通过环境变量读取java配置时，应该遵循的原则")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("将"),t("code",[e._v(".")]),e._v("替换为"),t("code",[e._v("_")])])]),e._v(" "),t("li",[t("p",[e._v("删除所有破折号"),t("code",[e._v("-")])])]),e._v(" "),t("li",[t("p",[e._v("变量名转为大写")])])]),e._v(" "),t("p",[e._v("例："),t("code",[e._v("spring.main.log-startup-info")]),e._v(" -> "),t("code",[e._v("SPRING_MAIN_LOGSTARTUPINFO")])]),e._v(" "),t("blockquote",[t("h5",{attrs:{id:"binding-from-environment-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binding-from-environment-variables"}},[e._v("#")]),e._v(" Binding from Environment Variables")]),e._v(" "),t("p",[e._v("Most operating systems impose strict rules around the names that can be used for environment variables. For example, Linux shell variables can contain only letters ("),t("code",[e._v("a")]),e._v(" to "),t("code",[e._v("z")]),e._v(" or "),t("code",[e._v("A")]),e._v(" to "),t("code",[e._v("Z")]),e._v("), numbers ("),t("code",[e._v("0")]),e._v(" to "),t("code",[e._v("9")]),e._v(") or the underscore character ("),t("code",[e._v("_")]),e._v("). By convention, Unix shell variables will also have their names in UPPERCASE.")]),e._v(" "),t("p",[e._v("Spring Boot’s relaxed binding rules are, as much as possible, designed to be compatible with these naming restrictions.")]),e._v(" "),t("p",[e._v("To convert a property name in the canonical-form to an environment variable name you can follow these rules:")]),e._v(" "),t("ul",[t("li",[e._v("Replace dots ("),t("code",[e._v(".")]),e._v(") with underscores ("),t("code",[e._v("_")]),e._v(").")]),e._v(" "),t("li",[e._v("Remove any dashes ("),t("code",[e._v("-")]),e._v(").")]),e._v(" "),t("li",[e._v("Convert to uppercase.")])]),e._v(" "),t("p",[e._v("For example, the configuration property "),t("code",[e._v("spring.main.log-startup-info")]),e._v(" would be an environment variable named "),t("code",[e._v("SPRING_MAIN_LOGSTARTUPINFO")]),e._v(".")]),e._v(" "),t("p",[e._v("Environment variables can also be used when binding to object lists. To bind to a "),t("code",[e._v("List")]),e._v(", the element number should be surrounded with underscores in the variable name.")]),e._v(" "),t("p",[e._v("For example, the configuration property "),t("code",[e._v("my.service[0].other")]),e._v(" would use an environment variable named "),t("code",[e._v("MY_SERVICE_0_OTHER")]),e._v(".")])])])}),[],!1,null,null,null);r.default=n.exports}}]);