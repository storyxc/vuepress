(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{511:function(a,s,t){"use strict";t.r(s);var e=t(27),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"使用pandas模块进行数据处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用pandas模块进行数据处理"}},[a._v("#")]),a._v(" 使用pandas模块进行数据处理")]),a._v(" "),t("blockquote",[t("p",[a._v("以csv/txt文件为例")])]),a._v(" "),t("h2",{attrs:{id:"读取文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读取文件"}},[a._v("#")]),a._v(" 读取文件")]),a._v(" "),t("p",[t("code",[a._v("pd.read_csv()")]),a._v("：返回一个DataFrame或TextFileReader")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("header指定具体表头行数,如果没有则header=None，第一行是表头则header=0,header还可以是一个列表例如header=[0,1,3],此时会有多个标题，且1和3之间的行会被忽略掉")])]),a._v(" "),t("li",[t("p",[a._v("seq指定分割符，默认为','")])]),a._v(" "),t("li",[t("p",[a._v("skiprows跳过某一行，行号从0开始，例如skiprows=2或skiprows=[0,1,200]")])]),a._v(" "),t("li",[t("p",[a._v("nrows指定需要读取的行数，从第一行开始,例如nrows=1000")])]),a._v(" "),t("li",[t("p",[a._v("na_values空值置换,会把指定的值替换为空值例如na_values=['\\N', 15]会把字符串\\N和数字15替换为空值NaN")]),a._v(" "),t("ul",[t("li",[a._v("如果na_values的参数是一个字典，那就可以为具体的列来指定缺失值的样子。我们就可以指定在Age这一列，0要被看成缺失值；在Comment这一列，“该用户没有评价”被看成缺失值。"),t("code",[a._v("na_values={'Age':0,'Comment':'该用户没有评价'}")])])])]),a._v(" "),t("li",[t("p",[a._v("iterator: True时返回一个TextFileReader，用于大文件处理，可以逐块处理文件")])]),a._v(" "),t("li",[t("p",[a._v("chunksize：指定文件块大小，返回一个TextFileReader")])]),a._v(" "),t("li",[t("p",[a._v("encoding：指定编码")])]),a._v(" "),t("li",[t("p",[a._v("index_col：读取时指定索引列，和df.set_index效果相同")])]),a._v(" "),t("li",[t("p",[a._v("names：文件中没有表头，手动指定表头，需要和header配合使用")])])]),a._v(" "),t("blockquote",[t("p",[a._v("names和header的使用场景主要如下：")]),a._v(" "),t("ol",[t("li",[a._v("csv文件有表头并且是第一行，那么names和header都无需指定;")]),a._v(" "),t("li",[a._v("csv文件有表头、但表头不是第一行，可能从下面几行开始才是真正的表头和数据，这个时候指定header即可;")]),a._v(" "),t("li",[a._v("csv文件没有表头，全部是纯数据，那么我们可以通过names手动生成表头;")]),a._v(" "),t("li",[a._v("csv文件有表头、但是这个表头你不想用，这个时候同时指定names和header。先用header选出表头和数据，然后再用names将表头替换掉，其实就等价于将数据读取进来之后再对列名进行rename;")])])]),a._v(" "),t("h2",{attrs:{id:"数据相关概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据相关概念"}},[a._v("#")]),a._v(" 数据相关概念")]),a._v(" "),t("h3",{attrs:{id:"dataframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dataframe"}},[a._v("#")]),a._v(" DataFrame")]),a._v(" "),t("p",[a._v("多行多列的二维数组、整个表格、多行多列")]),a._v(" "),t("h3",{attrs:{id:"series"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#series"}},[a._v("#")]),a._v(" Series")]),a._v(" "),t("p",[a._v("一维数据、一行或一列")]),a._v(" "),t("h3",{attrs:{id:"index"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#index"}},[a._v("#")]),a._v(" index")]),a._v(" "),t("p",[a._v("对应纵向上的行")]),a._v(" "),t("blockquote",[t("p",[a._v("替换索引为某一列的值：df.set_index('xxx', inplace=True)")])]),a._v(" "),t("h3",{attrs:{id:"columns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#columns"}},[a._v("#")]),a._v(" columns")]),a._v(" "),t("p",[a._v("对应横向上的列")]),a._v(" "),t("h2",{attrs:{id:"查询数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询数据"}},[a._v("#")]),a._v(" 查询数据")]),a._v(" "),t("h3",{attrs:{id:"几种方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#几种方法"}},[a._v("#")]),a._v(" 几种方法")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("df.loc，根据行、列的标签值查询（既能查询又能覆盖写入）")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("行根据行标签，也就是索引筛选，列根据列标签，列名筛选")])]),a._v(" "),t("li",[t("p",[a._v("如果选取的是所有行或者所有列，可以用：代替")])]),a._v(" "),t("li",[t("p",[a._v("行标签选取的时候，两端都包含，比如[0:5]指的是0，1，2，3，4，5")])])])]),a._v(" "),t("li",[t("p",[a._v("df.iloc，根据行、列的数字位置查询")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("iloc基于位置索引，简言之，就是第几行第几列，只不过这里的"),t("strong",[a._v("行列都是从0开始")]),a._v("的。")])]),a._v(" "),t("li",[t("p",[a._v("iloc的0：X中不包括X，只能到X-1.")])])])]),a._v(" "),t("li",[t("p",[a._v("df.where")])]),a._v(" "),t("li",[t("p",[a._v("df.query")])])]),a._v(" "),t("h3",{attrs:{id:"df-loc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#df-loc"}},[a._v("#")]),a._v(" df.loc")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("使用单个label值查询")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("查找并替换某一列的值&转换数据类型：df.loc[:, 'x'] = df['x'].str.replace('X','').astype('int32')")])]),a._v(" "),t("li",[t("p",[a._v("查询单个值：df.loc['index', 'column']")])]),a._v(" "),t("li",[t("p",[a._v("得到一个Series：df.loc['index', ['column1', 'column2']]")])])])]),a._v(" "),t("li",[t("p",[a._v("使用值列表批量查询")]),a._v(" "),t("ul",[t("li",[a._v("得到一个Series：df.loc(['index1', 'index2', 'index3'], 'column1')")]),a._v(" "),t("li",[a._v("得到DataFrame：df.loc(['index1', 'index2', 'index3'], ['column1', 'column2'])")])])]),a._v(" "),t("li",[t("p",[a._v("使用数值区间进行范围查询（包含区间的开始和结尾）")]),a._v(" "),t("ul",[t("li",[a._v("行index按区间：df.loc[1:2, 'colum1']")]),a._v(" "),t("li",[a._v("列index按区间：df.loc[1, 'column1': 'column2']")]),a._v(" "),t("li",[a._v("行列都按区间：df.loc[1:2, 'column1': 'column2']")])])]),a._v(" "),t("li",[t("p",[a._v("使用条件表达式查询")]),a._v(" "),t("ul",[t("li",[a._v("简单条件查询，年龄小于18：df.loc[df['age'] < 18, :]")]),a._v(" "),t("li",[a._v("复杂条件查询，年龄小于18且姓名为张三：df.loc[(df['age'] < 18) & (df['name'] == '张三'), :]")])])]),a._v(" "),t("li",[t("p",[a._v("调用函数查询")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("lambda表达式：df.loc[lambda df: df['age'] > 18, :]")])]),a._v(" "),t("li",[t("p",[a._v("调用函数：")]),a._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("query_adult")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" df"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'age'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18")]),a._v("\n  \ndf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("loc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("query_adult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])])])])]),a._v(" "),t("h2",{attrs:{id:"新增数据列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新增数据列"}},[a._v("#")]),a._v(" 新增数据列")]),a._v(" "),t("h3",{attrs:{id:"几种方法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#几种方法-2"}},[a._v("#")]),a._v(" 几种方法")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("直接赋值")]),a._v(" "),t("ul",[t("li",[a._v("df.loc[:, 'newAge'] = df['age'] + 1")])])]),a._v(" "),t("li",[t("p",[a._v("df.apply")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("apply赋值 基于 0-'index' 1-'columns' 操作跨行/跨列")])]),a._v(" "),t("li",[t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get_is_adult")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'age'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("18")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'成年'")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'未成年'")]),a._v("\n\ndf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("loc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'isAdult'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" df"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("apply")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("get_is_adult"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" axis"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])])])])]),a._v(" "),t("li",[t("p",[a._v("df.assign")]),a._v(" "),t("ul",[t("li",[a._v("assign添加一列：返回一个新的DataFrame，存在的列会被覆盖，如果参数是callable只能直接操作DataFrame，如果不是callable则直接赋值")]),a._v(" "),t("li",[a._v("df = df.assign(newAge=lambda x: x['age'] + 1)")])])]),a._v(" "),t("li",[t("p",[a._v("按条件选择分组并分别赋值")]),a._v(" "),t("ul",[t("li",[a._v("df.loc[df['highTemp'] - df['lowTemp'] > 10, 'tempDiff'] = '温差大'")]),a._v(" "),t("li",[a._v("df.loc[df['highTemp'] - df['lowTemp'] <= 10, 'tempDiff'] = '温差小'")])]),a._v(" "),t("blockquote",[t("p",[a._v("按字段分组查看数量： df['tempDiff'].value_counts()")])])])]),a._v(" "),t("h2",{attrs:{id:"数据合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据合并"}},[a._v("#")]),a._v(" 数据合并")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("df_list = [df]\ndf2 = pd.concat(df_list)\n\nif not os.path.exists('../resources/data1.csv'):\n    df2.to_csv('../resources/data1.csv', mode='a', index=False, header=True)\nelse:\n    df2.to_csv('../resources/data1.csv', mode='a', index=False, header=False)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("h2",{attrs:{id:"axis参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#axis参数"}},[a._v("#")]),a._v(" axis参数")]),a._v(" "),t("p",[a._v("pandas的axis参数：指的是跨该axis，例如指定columns 则是跨列，也就是沿着列名水平方向执行")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("跨列操作：在横向上遍历每行，对每行的数据进行操作")])]),a._v(" "),t("li",[t("p",[a._v("跨行操作：在水平方向遍历每列，对每列数据进行操作")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);